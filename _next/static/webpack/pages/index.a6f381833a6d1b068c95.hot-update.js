webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Home; });\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-select */ \"./node_modules/react-select/dist/react-select.browser.esm.js\");\n/* harmony import */ var _components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/CodeBlock */ \"./components/CodeBlock.tsx\");\n/* harmony import */ var _marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @marcelovicentegc/i18n-iso-languages */ \"./node_modules/@marcelovicentegc/i18n-iso-languages/dist/index.js\");\n/* harmony import */ var _marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__);\nvar _jsxFileName = \"/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx\",\n    _s = $RefreshSig$();\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;\n\n\n\n\n\n\nvar configure = function configure(options) {\n  Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"configure\"])(options);\n};\n\nvar defaultLookupKey = \"IETFLanguageTag\";\nvar defaultLocales = [\"pt-BR\", \"en-US\", \"zh-CN\", \"es-MX\", \"hi-IN\"];\nvar localesConfigPlaceholder = [{\n  localesSubset: {\n    lookupKey: defaultLookupKey,\n    locales: defaultLocales\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO31661Alpha2\",\n    locales: [\"PT\", \"US\", \"CH\", \"MX\", \"IN\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO31661Alpha3\",\n    locales: [\"BRA\", \"USA\", \"CHN\", \"MEX\", \"IND\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO6391\",\n    locales: [\"pt\", \"en\", \"zh\", \"es\", \"hi\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO6392\",\n    locales: [\"por\", \"eng\", \"zho\", \"spa\", \"hin\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"officialLanguage\",\n    locales: [\"Portuguese\", \"English\", \"Chinese\", \"Spanish\", \"Hindi\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"nativeOfficialLanguage\",\n    locales: [\"Português\", \"English\", \"中文\", \"Español\", \"हिन्दी\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"region\",\n    locales: [\"Brazil\", \"United Kingdom\", \"China\", \"Mexico\", \"India\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"nativeRegion\",\n    locales: [\"Brasil\", \"United Kingdom\", \"中华人民共和国\", \"México\", \"भारत गणराज्य\"]\n  }\n}];\nvar defaultMultipleByOfficialLanguage = [\"Portuguese\", \"German\"];\nvar defaultMultipleLocalesByLanguageTagQuery = [\"en-US\", \"es-MX\"];\nvar defaultSingleLocaleByLanguageTagQuery = \"hi-IN\";\nvar buttonLabel = \"Run the code above ☝️\";\nconfigure({\n  localesSubset: {\n    lookupKey: defaultLookupKey,\n    locales: defaultLocales\n  }\n});\nfunction Home() {\n  _s();\n\n  var _this = this;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"IETFLanguageTag\"),\n      demoLookupKey = _useState[0],\n      setDemoLookupKey = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultLocales),\n      demoLocales = _useState2[0],\n      setDemoLocales = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(demoLookupKey),\n      futureDemoLookupKey = _useState3[0],\n      setFutureDemoLookupKey = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(demoLocales),\n      futureDemoLocales = _useState4[0],\n      setFutureDemoLocales = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(localesConfigPlaceholder[0]),\n      demoLocalesPlaceholder = _useState5[0],\n      setDemoLocalesPlaceholder = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultMultipleLocalesByLanguageTagQuery),\n      multipleLocalesByLanguageTagQuery = _useState6[0],\n      setMultipleLocalesByLanguageTagQuery = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultSingleLocaleByLanguageTagQuery),\n      singleLocaleByLanguageTagQuery = _useState7[0],\n      setSingleLocaleByLanguageTagQuery = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(),\n      singleLocaleByLanguageTag = _useState8[0],\n      setSingleLocaleByLanguageTag = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]),\n      multipleLocalesByLanguageTag = _useState9[0],\n      setMultipleLocalesByLanguageTag = _useState9[1];\n\n  var _useState10 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]),\n      localesByGetLocales = _useState10[0],\n      setLocalesByGetLocales = _useState10[1];\n\n  var options = [{\n    value: \"IETFLanguageTag\",\n    label: \"IETF language tag\"\n  }, {\n    value: \"ISO31661Alpha2\",\n    label: \"ISO 3166-1 alpha-2\"\n  }, {\n    value: \"ISO31661Alpha3\",\n    label: \"ISO 3166-1 alpha-3\"\n  }, {\n    value: \"ISO6391\",\n    label: \"ISO 639-1\"\n  }, {\n    value: \"ISO6392\",\n    label: \"ISO 639-2\"\n  }, {\n    value: \"nativeOfficialLanguage\",\n    label: \"Native official language\"\n  }, {\n    value: \"nativeRegion\",\n    label: \"Native region\"\n  }, {\n    value: \"officialLanguage\",\n    label: \"Official language\"\n  }, {\n    value: \"region\",\n    label: \"Region\"\n  }];\n\n  var handleSelectOnChange = function handleSelectOnChange(value) {\n    setFutureDemoLookupKey(value);\n    var config = localesConfigPlaceholder.find(function (conf) {\n      return conf.localesSubset.lookupKey === value;\n    });\n    setFutureDemoLocales(config.localesSubset.locales);\n    setDemoLocalesPlaceholder(config);\n  };\n\n  var handleFutureDemoLocales = function handleFutureDemoLocales(value) {\n    return setFutureDemoLocales(value);\n  };\n\n  var handleOnConfigure = function handleOnConfigure() {\n    configure({\n      localesSubset: {\n        lookupKey: futureDemoLookupKey,\n        locales: futureDemoLocales\n      }\n    });\n    setDemoLookupKey(futureDemoLookupKey);\n    setDemoLocales(futureDemoLocales);\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, __jsx(next_head__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, \"i18n-iso-languages\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"jsx-502875097\" + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, \"i18n-iso-languages\"), __jsx(\"p\", {\n    className: \"jsx-502875097\" + \" \" + \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, \"Get started by adding it to your project \"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"codeBlockContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, \"yarn add @marcelovicentegc/i18n-iso-languages \", __jsx(\"br\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 59\n    }\n  }), \"npm i @marcelovicentegc/i18n-iso-language\")), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, \"configure\"), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, \"lookup key\"), __jsx(react_select__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    options: options,\n    defaultValue: options[0],\n    onChange: function onChange(option) {\n      handleSelectOnChange(option.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, \"locales\"), __jsx(\"input\", {\n    placeholder: demoLocalesPlaceholder.localesSubset.locales.join(\",\"),\n    value: futureDemoLocales.join(),\n    onChange: function onChange(event) {\n      return handleFutureDemoLocales(event.target.value.split(\",\"));\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, \"\\nimport { configure } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconfigure({\\n  localesSubset: {\\n    lookupKey: '\".concat(demoLookupKey, \"',\\n    locales: [\").concat(demoLocales.map(function (locale) {\n    return \"'\".concat(locale, \"'\");\n  }), \"],\\n  },\\n})\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      return handleOnConfigure();\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\")), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, \"getLocales\"), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocales } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locales = getLocales()\\n\\nlocales.map((locale) => {\\n  return (\\n    <>\\n    <div className=\\\"separator\\\" />\\n    <p>Official language: {locale.officialLanguage}</p>\\n    <p>\\n      Native official language: {locale.nativeOfficialLanguage}\\n    </p>\\n    <p>Region: {locale.region}</p>\\n    <p>Native region: {locale.nativeRegion}</p>\\n    <p>ISO 639-1: {locale.ISO6391}</p>\\n    <p>ISO 3166-1 alpha-2: {locale.ISO31661Alpha2}</p>\\n    <p>ISO 3166-1 alpha-3: {locale.ISO31661Alpha3}</p>\\n    <p>IETFL language tag: {locale.IETFLanguageTag}</p>\\n    </>\\n  );\\n})\\n              \"), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locales = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocales\"])();\n      setLocalesByGetLocales(locales);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), localesByGetLocales.length > 0 && __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 19\n    }\n  }, \"Result\"), localesByGetLocales.map(function (locale, index) {\n    return __jsx(react__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"], {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    }, __jsx(\"div\", {\n      className: \"jsx-502875097\" + \" \" + \"separator\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 25\n      }\n    }), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 25\n      }\n    }, \"Official language: \", locale.officialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }, \"Native official language:\", \" \", locale.nativeOfficialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, \"Region: \", locale.region), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 25\n      }\n    }, \"Native region: \", locale.nativeRegion), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 25\n      }\n    }, \"ISO 639-1: \", locale.ISO6391), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 25\n      }\n    }, \"ISO 3166-1 alpha-2: \", locale.ISO31661Alpha2), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }\n    }, \"ISO 3166-1 alpha-3: \", locale.ISO31661Alpha3), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 25\n      }\n    }, \"IETFL language tag: \", locale.IETFLanguageTag));\n  })))), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }, \"getLocaleByIETFLanguageTag\"), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, \"You can get a single locale by language tag by providing a single language tag...\"), __jsx(\"input\", {\n    placeholder: defaultSingleLocaleByLanguageTagQuery,\n    value: singleLocaleByLanguageTagQuery,\n    onChange: function onChange(event) {\n      return setSingleLocaleByLanguageTagQuery(event.target.value);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocaleByIETFLanguageTag, Locale } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locale = getLocaleByIETFLanguageTag('\".concat(singleLocaleByLanguageTagQuery, \"') as Locale\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locale = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocaleByIETFLanguageTag\"])(singleLocaleByLanguageTagQuery);\n      console.log(locale);\n      setSingleLocaleByLanguageTag(locale);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), singleLocaleByLanguageTag && __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 17\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 19\n    }\n  }, \"Result\"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 19\n    }\n  }, \"Official language:\", \" \", singleLocaleByLanguageTag.officialLanguage), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 19\n    }\n  }, \"Native official language:\", \" \", singleLocaleByLanguageTag.nativeOfficialLanguage), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 19\n    }\n  }, \"Region: \", singleLocaleByLanguageTag.region), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 19\n    }\n  }, \"Native region: \", singleLocaleByLanguageTag.nativeRegion), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, \"ISO 639-1: \", singleLocaleByLanguageTag.ISO6391), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 19\n    }\n  }, \"ISO 3166-1 alpha-2:\", \" \", singleLocaleByLanguageTag.ISO31661Alpha2), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 19\n    }\n  }, \"ISO 3166-1 alpha-3:\", \" \", singleLocaleByLanguageTag.ISO31661Alpha3), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 19\n    }\n  }, \"IETFL language tag:\", \" \", singleLocaleByLanguageTag.IETFLanguageTag))), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }\n  }, \"Or you can get multiple by providing multiple language tags!\"), __jsx(\"input\", {\n    placeholder: defaultMultipleLocalesByLanguageTagQuery.join(\",\"),\n    value: multipleLocalesByLanguageTagQuery.join(),\n    onChange: function onChange(event) {\n      return setMultipleLocalesByLanguageTagQuery(event.target.value.split(\",\"));\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocaleByIETFLanguageTag, Locale } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locales = getLocaleByIETFLanguageTag([\".concat(multipleLocalesByLanguageTagQuery.map(function (locale) {\n    return \"'\".concat(locale, \"'\");\n  }), \"]) as Locale[]\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locales = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocaleByIETFLanguageTag\"])(multipleLocalesByLanguageTagQuery);\n      setMultipleLocalesByLanguageTag(locales);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 15\n    }\n  }, \"Result\"), multipleLocalesByLanguageTag.map(function (locale, index) {\n    return __jsx(react__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"], {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"jsx-502875097\" + \" \" + \"separator\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 21\n      }\n    }, \"Official language: \", locale.officialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 21\n      }\n    }, \"Native official language: \", locale.nativeOfficialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 21\n      }\n    }, \"Region: \", locale.region), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }\n    }, \"Native region: \", locale.nativeRegion), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 21\n      }\n    }, \"ISO 639-1: \", locale.ISO6391), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 21\n      }\n    }, \"ISO 3166-1 alpha-2: \", locale.ISO31661Alpha2), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }\n    }, \"ISO 3166-1 alpha-3: \", locale.ISO31661Alpha3), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 21\n      }\n    }, \"IETFL language tag: \", locale.IETFLanguageTag));\n  }))))), __jsx(\"footer\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"https://github.com/marcelovicentegc/i18n-iso-languages\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 9\n    }\n  }, \"Brought to you with \\u2764\\uFE0F by Marcelo Cardoso\")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"2191872258\",\n    __self: this\n  }, \".container.jsx-502875097{min-height:100vh;padding:0 0.5rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}main.jsx-502875097{padding:5rem 0;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-502875097{width:100%;height:100px;border-top:1px solid #eaeaea;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-502875097 img.jsx-502875097{margin-left:0.5rem;}footer.jsx-502875097 a.jsx-502875097{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}a.jsx-502875097{color:inherit;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-502875097 a.jsx-502875097{color:#0070f3;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-502875097 a.jsx-502875097:hover,.title.jsx-502875097 a.jsx-502875097:focus,.title.jsx-502875097 a.jsx-502875097:active{-webkit-text-decoration:underline;text-decoration:underline;}.title.jsx-502875097{margin:0;line-height:1.15;font-size:4rem;}.title.jsx-502875097,.description.jsx-502875097{text-align:center;}.description.jsx-502875097{line-height:1.5;font-size:1.5rem;}.grid.jsx-502875097{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;max-width:1260px;margin-top:3rem;}.codeBlockContainer.jsx-502875097{max-width:calc(100vw - 2.5rem);}.card.jsx-502875097{margin:1rem;-webkit-flex-basis:30%;-ms-flex-preferred-size:30%;flex-basis:30%;max-width:800px;padding:1.5rem;text-align:left;color:inherit;-webkit-text-decoration:none;text-decoration:none;border:1px solid #eaeaea;border-radius:10px;-webkit-transition:color 0.15s ease,border-color 0.15s ease;transition:color 0.15s ease,border-color 0.15s ease;}.card.jsx-502875097 input.jsx-502875097{padding:0.5rem;height:38px;border-radius:4px;border:0.5px solid hsl(0,0%,80%);width:100%;font-size:16px;-webkit-transition:all 100ms;transition:all 100ms;color:hsl(0,0%,20%);}.card.jsx-502875097 input.jsx-502875097:focus{outline:none;border:1px solid #2684ff;box-shadow:0 0 0 1px #2684ff;}.card.jsx-502875097 button.jsx-502875097{padding:0.5rem;border-radius:4px;background-color:#fff;border:0.5px solid hsl(0,0%,80%);color:hsl(0,0%,20%);cursor:pointer;-webkit-transition:all 100ms;transition:all 100ms;}.card.jsx-502875097 button.jsx-502875097:focus,.card.jsx-502875097 button.jsx-502875097:hover{outline:none;border:1px solid var(--blue);box-shadow:0 0 0 1px var(--blue);}.card.jsx-502875097 button.jsx-502875097:active{outline:none;border:1px solid var(--blue);box-shadow:0 0 0 1px var(--blue);background-color:var(--blue);color:#fff;}.card.jsx-502875097 h3.jsx-502875097{margin:0 0 1rem 0;font-size:1.5rem;}.card.jsx-502875097 p.jsx-502875097{margin:0;font-size:1.25rem;line-height:1.5;}.card.jsx-502875097 .separator.jsx-502875097{height:14px;width:100%;border-bottom:1px solid #eaeaea;margin-bottom:12px;}.logo.jsx-502875097{height:1em;}@media (max-width:600px){.grid.jsx-502875097{width:calc(100vw - 2.5rem);-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.card.jsx-502875097{width:calc(100% - 1.5rem);}.title.jsx-502875097{font-size:3rem;}.description.jsx-502875097{font-size:1rem;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx */\"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"1712543154\",\n    __self: this\n  }, \"html,body{--scrollbarBG:#fff;--thumbBG:#000;--blue:#2684ff;-webkit-scrollbar-width:thin;-moz-scrollbar-width:thin;-ms-scrollbar-width:thin;scrollbar-width:thin;-webkit-scrollbar-color:var(--thumbBG) var(--scrollbarBG);-moz-scrollbar-color:var(--thumbBG) var(--scrollbarBG);-ms-scrollbar-color:var(--thumbBG) var(--scrollbarBG);scrollbar-color:var(--thumbBG) var(--scrollbarBG);padding:0;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto, Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue, sans-serif;}*{box-sizing:border-box;}html::-webkit-scrollbar-thumb{background-color:var(--thumbBG);border-radius:6px;border:3px solid var(--scrollbarBG);}html::-webkit-scrollbar-track{background:var(--scrollbarBG);}html::-webkit-scrollbar{width:11px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx */\"));\n}\n\n_s(Home, \"4WIqe7Kx1n62m+OcXkfa9vKpAAw=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ })

})