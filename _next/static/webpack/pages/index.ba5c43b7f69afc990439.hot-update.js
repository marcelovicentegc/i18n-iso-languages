webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Home; });\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_select__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-select */ \"./node_modules/react-select/dist/react-select.browser.esm.js\");\n/* harmony import */ var _components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/CodeBlock */ \"./components/CodeBlock.tsx\");\n/* harmony import */ var _marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @marcelovicentegc/i18n-iso-languages */ \"./node_modules/@marcelovicentegc/i18n-iso-languages/dist/index.js\");\n/* harmony import */ var _marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__);\nvar _jsxFileName = \"/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx\",\n    _s = $RefreshSig$();\n\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;\n\n\n\n\n\n\nvar configure = function configure(options) {\n  Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"configure\"])(options);\n};\n\nvar defaultLookupKey = \"IETFLanguageTag\";\nvar defaultLocales = [\"pt-BR\", \"en-US\", \"zh-CN\", \"es-MX\", \"hi-IN\"];\nvar localesConfigPlaceholder = [{\n  localesSubset: {\n    lookupKey: defaultLookupKey,\n    locales: defaultLocales\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO31661Alpha2\",\n    locales: [\"PT\", \"US\", \"CH\", \"MX\", \"IN\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO31661Alpha3\",\n    locales: [\"BRA\", \"USA\", \"CHN\", \"MEX\", \"IND\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO6391\",\n    locales: [\"pt\", \"en\", \"zh\", \"es\", \"hi\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"ISO6392\",\n    locales: [\"por\", \"eng\", \"zho\", \"spa\", \"hin\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"officialLanguage\",\n    locales: [\"Portuguese\", \"English\", \"Chinese\", \"Spanish\", \"Hindi\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"nativeOfficialLanguage\",\n    locales: [\"Português\", \"English\", \"中文\", \"Español\", \"हिन्दी\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"region\",\n    locales: [\"Brazil\", \"United Kingdom\", \"China\", \"Mexico\", \"India\"]\n  }\n}, {\n  localesSubset: {\n    lookupKey: \"nativeRegion\",\n    locales: [\"Brasil\", \"United Kingdom\", \"中华人民共和国\", \"México\", \"भारत गणराज्य\"]\n  }\n}];\nvar defaultMultipleByOfficialLanguage = [\"Portuguese\", \"German\"];\nvar defaultMultipleLocalesByLanguageTagQuery = [\"en-US\", \"es-MX\"];\nvar defaultSingleLocaleByLanguageTagQuery = \"hi-IN\";\nconfigure({\n  localesSubset: {\n    lookupKey: defaultLookupKey,\n    locales: defaultLocales\n  }\n});\nfunction Home() {\n  _s();\n\n  var _this = this;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"IETFLanguageTag\"),\n      demoLookupKey = _useState[0],\n      setDemoLookupKey = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultLocales),\n      demoLocales = _useState2[0],\n      setDemoLocales = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(demoLookupKey),\n      futureDemoLookupKey = _useState3[0],\n      setFutureDemoLookupKey = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(demoLocales),\n      futureDemoLocales = _useState4[0],\n      setFutureDemoLocales = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(localesConfigPlaceholder[0]),\n      demoLocalesPlaceholder = _useState5[0],\n      setDemoLocalesPlaceholder = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultMultipleLocalesByLanguageTagQuery),\n      multipleLocalesByLanguageTagQuery = _useState6[0],\n      setMultipleLocalesByLanguageTagQuery = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(defaultSingleLocaleByLanguageTagQuery),\n      singleLocaleByLanguageTagQuery = _useState7[0],\n      setSingleLocaleByLanguageTagQuery = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(),\n      singleLocaleByLanguageTag = _useState8[0],\n      setSingleLocaleByLanguageTag = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]),\n      multipleLocalesByLanguageTag = _useState9[0],\n      setMultipleLocalesByLanguageTag = _useState9[1];\n\n  var _useState10 = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])([]),\n      localesByGetLocales = _useState10[0],\n      setLocalesByGetLocales = _useState10[1];\n\n  var options = [{\n    value: \"IETFLanguageTag\",\n    label: \"IETF language tag\"\n  }, {\n    value: \"ISO31661Alpha2\",\n    label: \"ISO 3166-1 alpha-2\"\n  }, {\n    value: \"ISO31661Alpha3\",\n    label: \"ISO 3166-1 alpha-3\"\n  }, {\n    value: \"ISO6391\",\n    label: \"ISO 639-1\"\n  }, {\n    value: \"ISO6392\",\n    label: \"ISO 639-2\"\n  }, {\n    value: \"nativeOfficialLanguage\",\n    label: \"Native official language\"\n  }, {\n    value: \"nativeRegion\",\n    label: \"Native region\"\n  }, {\n    value: \"officialLanguage\",\n    label: \"Official language\"\n  }, {\n    value: \"region\",\n    label: \"Region\"\n  }];\n\n  var handleSelectOnChange = function handleSelectOnChange(value) {\n    setFutureDemoLookupKey(value);\n    var config = localesConfigPlaceholder.find(function (conf) {\n      return conf.localesSubset.lookupKey === value;\n    });\n    setFutureDemoLocales(config.localesSubset.locales);\n    setDemoLocalesPlaceholder(config);\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, __jsx(next_head__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, \"i18n-iso-languages\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  })), __jsx(\"main\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"jsx-502875097\" + \" \" + \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"i18n-iso-languages\"), __jsx(\"p\", {\n    className: \"jsx-502875097\" + \" \" + \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, \"Get started by adding it to your project \"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"codeBlockContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"yarn add @marcelovicentegc/i18n-iso-languages \", __jsx(\"br\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 59\n    }\n  }), \"npm i @marcelovicentegc/i18n-iso-language\")), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, \"configure\"), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, \"lookup key\"), __jsx(react_select__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    options: options,\n    defaultValue: options[0],\n    onChange: function onChange(option) {\n      handleSelectOnChange(option.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"locales\"), __jsx(\"input\", {\n    placeholder: demoLocalesPlaceholder.localesSubset.locales.join(\",\"),\n    value: futureDemoLocales.join(),\n    onChange: function onChange(event) {\n      return setFutureDemoLocales(event.target.value.split(\",\"));\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, \"\\nimport { configure } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconfigure({\\n  localesSubset: {\\n    lookupKey: '\".concat(demoLookupKey, \"',\\n    locales: [\").concat(demoLocales.map(function (locale) {\n    return \"'\".concat(locale, \"'\");\n  }), \"],\\n  },\\n})\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      configure({\n        localesSubset: {\n          lookupKey: futureDemoLookupKey,\n          locales: futureDemoLocales\n        }\n      });\n      setDemoLookupKey(futureDemoLookupKey);\n      setDemoLocales(futureDemoLocales);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\")), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, \"getLocales\"), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocales } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locales = getLocales()\\n\\nlocales.map((locale) => {\\n  return (\\n    <>\\n    <div className=\\\"separator\\\" />\\n    <p>Official language: {locale.officialLanguage}</p>\\n    <p>\\n      Native official language: {locale.nativeOfficialLanguage}\\n    </p>\\n    <p>Region: {locale.region}</p>\\n    <p>Native region: {locale.nativeRegion}</p>\\n    <p>ISO 639-1: {locale.ISO6391}</p>\\n    <p>ISO 3166-1 alpha-2: {locale.ISO31661Alpha2}</p>\\n    <p>ISO 3166-1 alpha-3: {locale.ISO31661Alpha3}</p>\\n    <p>IETFL language tag: {locale.IETFLanguageTag}</p>\\n    </>\\n  );\\n})\\n              \"), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locales = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocales\"])();\n      setLocalesByGetLocales(locales);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), localesByGetLocales.length > 0 && __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }\n  }, \"Result\"), localesByGetLocales.map(function (locale, index) {\n    return __jsx(react__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"], {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 23\n      }\n    }, __jsx(\"div\", {\n      className: \"jsx-502875097\" + \" \" + \"separator\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 25\n      }\n    }), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }, \"Official language: \", locale.officialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, \"Native official language:\", \" \", locale.nativeOfficialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 25\n      }\n    }, \"Region: \", locale.region), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }, \"Native region: \", locale.nativeRegion), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 25\n      }\n    }, \"ISO 639-1: \", locale.ISO6391), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 25\n      }\n    }, \"ISO 3166-1 alpha-2: \", locale.ISO31661Alpha2), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 25\n      }\n    }, \"ISO 3166-1 alpha-3: \", locale.ISO31661Alpha3), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, \"IETFL language tag: \", locale.IETFLanguageTag));\n  })))), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, \"getLocaleByIETFLanguageTag\"), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, \"You can get a single locale by language tag by providing a single language tag...\"), __jsx(\"input\", {\n    placeholder: defaultSingleLocaleByLanguageTagQuery,\n    value: singleLocaleByLanguageTagQuery,\n    onChange: function onChange(event) {\n      return setSingleLocaleByLanguageTagQuery(event.target.value);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocaleByIETFLanguageTag, Locale } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locale = getLocaleByIETFLanguageTag('\".concat(singleLocaleByLanguageTagQuery, \"') as Locale\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locale = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocaleByIETFLanguageTag\"])(singleLocaleByLanguageTagQuery);\n      console.log(locale);\n      setSingleLocaleByLanguageTag(locale);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), singleLocaleByLanguageTag && __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 17\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 19\n    }\n  }, \"Result\"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 19\n    }\n  }), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 19\n    }\n  }, \"Official language:\", \" \", singleLocaleByLanguageTag.officialLanguage), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 19\n    }\n  }, \"Native official language:\", \" \", singleLocaleByLanguageTag.nativeOfficialLanguage), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 19\n    }\n  }, \"Region: \", singleLocaleByLanguageTag.region), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 19\n    }\n  }, \"Native region: \", singleLocaleByLanguageTag.nativeRegion), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }, \"ISO 639-1: \", singleLocaleByLanguageTag.ISO6391), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 19\n    }\n  }, \"ISO 3166-1 alpha-2:\", \" \", singleLocaleByLanguageTag.ISO31661Alpha2), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, \"ISO 3166-1 alpha-3:\", \" \", singleLocaleByLanguageTag.ISO31661Alpha3), __jsx(\"p\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 19\n    }\n  }, \"IETFL language tag:\", \" \", singleLocaleByLanguageTag.IETFLanguageTag))), __jsx(\"h4\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  }, \"Or you can get multiple by providing multiple language tags!\"), __jsx(\"input\", {\n    placeholder: defaultMultipleLocalesByLanguageTagQuery.join(\",\"),\n    value: multipleLocalesByLanguageTagQuery.join(),\n    onChange: function onChange(event) {\n      return setMultipleLocalesByLanguageTagQuery(event.target.value.split(\",\"));\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }\n  }), __jsx(_components_CodeBlock__WEBPACK_IMPORTED_MODULE_4__[\"CodeBlock\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }\n  }, \"\\nimport { getLocaleByIETFLanguageTag, Locale } from '@marcelovicentegc/i18n-iso-languages'\\n              \\nconst locales = getLocaleByIETFLanguageTag([\".concat(multipleLocalesByLanguageTagQuery.map(function (locale) {\n    return \"'\".concat(locale, \"'\");\n  }), \"]) as Locale[]\\n              \")), __jsx(\"button\", {\n    onClick: function onClick() {\n      var locales = Object(_marcelovicentegc_i18n_iso_languages__WEBPACK_IMPORTED_MODULE_5__[\"getLocaleByIETFLanguageTag\"])(multipleLocalesByLanguageTagQuery);\n      setMultipleLocalesByLanguageTag(locales);\n    },\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, \"Run the code above \\u261D\\uFE0F\"), __jsx(\"div\", {\n    className: \"jsx-502875097\" + \" \" + \"separator\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }\n  }), __jsx(\"details\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }, __jsx(\"summary\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 15\n    }\n  }, \"Result\"), multipleLocalesByLanguageTag.map(function (locale, index) {\n    return __jsx(react__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"], {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"jsx-502875097\" + \" \" + \"separator\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 21\n      }\n    }), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }\n    }, \"Official language: \", locale.officialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }\n    }, \"Native official language: \", locale.nativeOfficialLanguage), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }, \"Region: \", locale.region), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 21\n      }\n    }, \"Native region: \", locale.nativeRegion), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 21\n      }\n    }, \"ISO 639-1: \", locale.ISO6391), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }, \"ISO 3166-1 alpha-2: \", locale.ISO31661Alpha2), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 21\n      }\n    }, \"ISO 3166-1 alpha-3: \", locale.ISO31661Alpha3), __jsx(\"p\", {\n      className: \"jsx-502875097\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 21\n      }\n    }, \"IETFL language tag: \", locale.IETFLanguageTag));\n  }))))), __jsx(\"footer\", {\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"https://github.com/marcelovicentegc/i18n-iso-languages\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"jsx-502875097\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }, \"Brought to you with \\u2764\\uFE0F by Marcelo Cardoso\")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"2191872258\",\n    __self: this\n  }, \".container.jsx-502875097{min-height:100vh;padding:0 0.5rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}main.jsx-502875097{padding:5rem 0;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-502875097{width:100%;height:100px;border-top:1px solid #eaeaea;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.jsx-502875097 img.jsx-502875097{margin-left:0.5rem;}footer.jsx-502875097 a.jsx-502875097{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}a.jsx-502875097{color:inherit;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-502875097 a.jsx-502875097{color:#0070f3;-webkit-text-decoration:none;text-decoration:none;}.title.jsx-502875097 a.jsx-502875097:hover,.title.jsx-502875097 a.jsx-502875097:focus,.title.jsx-502875097 a.jsx-502875097:active{-webkit-text-decoration:underline;text-decoration:underline;}.title.jsx-502875097{margin:0;line-height:1.15;font-size:4rem;}.title.jsx-502875097,.description.jsx-502875097{text-align:center;}.description.jsx-502875097{line-height:1.5;font-size:1.5rem;}.grid.jsx-502875097{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;max-width:1260px;margin-top:3rem;}.codeBlockContainer.jsx-502875097{max-width:calc(100vw - 2.5rem);}.card.jsx-502875097{margin:1rem;-webkit-flex-basis:30%;-ms-flex-preferred-size:30%;flex-basis:30%;max-width:800px;padding:1.5rem;text-align:left;color:inherit;-webkit-text-decoration:none;text-decoration:none;border:1px solid #eaeaea;border-radius:10px;-webkit-transition:color 0.15s ease,border-color 0.15s ease;transition:color 0.15s ease,border-color 0.15s ease;}.card.jsx-502875097 input.jsx-502875097{padding:0.5rem;height:38px;border-radius:4px;border:0.5px solid hsl(0,0%,80%);width:100%;font-size:16px;-webkit-transition:all 100ms;transition:all 100ms;color:hsl(0,0%,20%);}.card.jsx-502875097 input.jsx-502875097:focus{outline:none;border:1px solid #2684ff;box-shadow:0 0 0 1px #2684ff;}.card.jsx-502875097 button.jsx-502875097{padding:0.5rem;border-radius:4px;background-color:#fff;border:0.5px solid hsl(0,0%,80%);color:hsl(0,0%,20%);cursor:pointer;-webkit-transition:all 100ms;transition:all 100ms;}.card.jsx-502875097 button.jsx-502875097:focus,.card.jsx-502875097 button.jsx-502875097:hover{outline:none;border:1px solid var(--blue);box-shadow:0 0 0 1px var(--blue);}.card.jsx-502875097 button.jsx-502875097:active{outline:none;border:1px solid var(--blue);box-shadow:0 0 0 1px var(--blue);background-color:var(--blue);color:#fff;}.card.jsx-502875097 h3.jsx-502875097{margin:0 0 1rem 0;font-size:1.5rem;}.card.jsx-502875097 p.jsx-502875097{margin:0;font-size:1.25rem;line-height:1.5;}.card.jsx-502875097 .separator.jsx-502875097{height:14px;width:100%;border-bottom:1px solid #eaeaea;margin-bottom:12px;}.logo.jsx-502875097{height:1em;}@media (max-width:600px){.grid.jsx-502875097{width:calc(100vw - 2.5rem);-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.card.jsx-502875097{width:calc(100% - 1.5rem);}.title.jsx-502875097{font-size:3rem;}.description.jsx-502875097{font-size:1rem;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL21hcmNlbG8vRG9jdW1lbnRzL2kxOG4tbGFuZ3VhZ2UtY29kZXMvZGVtby9wYWdlcy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaWFrQixBQUc0QixBQVNGLEFBU0osQUFTUSxBQUlOLEFBTUMsQUFLQSxBQU9ZLEFBSWpCLEFBT1MsQUFJRixBQUtILEFBVWtCLEFBSW5CLEFBYUcsQUFXRixBQU1FLEFBV0YsQUFNQSxBQVFLLEFBS1QsQUFNRyxBQU9ELEFBS2tCLEFBS0QsQUFJWCxBQUlBLFNBeEhBLEFBMEZDLEVBN0hMLEFBMElmLENBekVpQixBQWtFSixDQTFDYyxBQWlCSSxBQU1BLENBN0ZSLEFBS0EsQ0FqQ2QsQUF1RkssQUFpQk0sQUF5RGxCLEFBSUEsQ0E5R2lCLENBaEVBLENBNERuQixBQThFbUIsQ0EvR25CLElBMkhrQyxDQW5JSCxFQW1DZCxBQWdIZixDQXJFa0IsQUErQ0YsQUFpQlEsSUFsRjFCLEVBZEEsQUFpRHdCLENBakhULENBMElmLEdBL0IrQixHQXJEL0IsQ0FzRW1DLEFBTUEsQ0FjbkMsRUEvQ3FDLEdBeEZ0QixLQVVBLEVBK0ZzQixBQW9DaEIsS0F0R3JCLElBWEEsQUFLQSxHQWtFQSxPQTlFeUIsQUFzQ0EsQUFtRnpCLENBMUJBLEFBTStCLEdBaERiLEFBZUwsVUFpQlcsQ0FoQlAsS0FmQSxVQWdCTSxBQWdDVixDQTZCWCxHQWhLc0IsQUFtSFAsQ0EvQkMsTUFnRGxCLE9BM0h3QixDQTJHRCxFQS9CUCxFQWxFUyxZQW1FRixlQWNDLG1CQXRFSCxBQXVGckIsQ0FoQkEsU0FqQ3lCLEdBbkVBLEdBc0ZFLFdBN0VGLGNBOEVKLFlBcEVBLE9BcUVrQyxpQ0ExRHZELGdCQXNDaUIsR0FuRUksY0FTQSxvQkFVckIsb0JBa0RtQixNQW1CbkIsV0FsQmtCLGdCQUNsQixNQXRFQSxjQVNBIiwiZmlsZSI6Ii9ob21lL21hcmNlbG8vRG9jdW1lbnRzL2kxOG4tbGFuZ3VhZ2UtY29kZXMvZGVtby9wYWdlcy9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5pbXBvcnQgU2VsZWN0IGZyb20gXCJyZWFjdC1zZWxlY3RcIjtcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29kZUJsb2NrIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ29kZUJsb2NrXCI7XG5pbXBvcnQge1xuICBjb25maWd1cmUgYXMgY29uZixcbiAgZ2V0TG9jYWxlcyxcbiAgTG9jYWxlS2V5LFxuICBnZXRMb2NhbGVCeUlFVEZMYW5ndWFnZVRhZyxcbiAgTG9jYWxlLFxufSBmcm9tIFwiQG1hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VzXCI7XG5cbmludGVyZmFjZSBDb25maWdPcHRpb25zIHtcbiAgbG9jYWxlc1N1YnNldDoge1xuICAgIGxvb2t1cEtleTogTG9jYWxlS2V5O1xuICAgIGxvY2FsZXM6IHN0cmluZ1tdO1xuICB9O1xufVxuXG5jb25zdCBjb25maWd1cmUgPSAob3B0aW9uczogQ29uZmlnT3B0aW9ucykgPT4ge1xuICBjb25mKG9wdGlvbnMpO1xufTtcblxuY29uc3QgZGVmYXVsdExvb2t1cEtleTogTG9jYWxlS2V5ID0gXCJJRVRGTGFuZ3VhZ2VUYWdcIjtcbmNvbnN0IGRlZmF1bHRMb2NhbGVzID0gW1wicHQtQlJcIiwgXCJlbi1VU1wiLCBcInpoLUNOXCIsIFwiZXMtTVhcIiwgXCJoaS1JTlwiXTtcbmNvbnN0IGxvY2FsZXNDb25maWdQbGFjZWhvbGRlcjogQXJyYXk8Q29uZmlnT3B0aW9ucz4gPSBbXG4gIHtcbiAgICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgICBsb29rdXBLZXk6IGRlZmF1bHRMb29rdXBLZXksXG4gICAgICBsb2NhbGVzOiBkZWZhdWx0TG9jYWxlcyxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIklTTzMxNjYxQWxwaGEyXCIsXG4gICAgICBsb2NhbGVzOiBbXCJQVFwiLCBcIlVTXCIsIFwiQ0hcIiwgXCJNWFwiLCBcIklOXCJdLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgICBsb29rdXBLZXk6IFwiSVNPMzE2NjFBbHBoYTNcIixcbiAgICAgIGxvY2FsZXM6IFtcIkJSQVwiLCBcIlVTQVwiLCBcIkNITlwiLCBcIk1FWFwiLCBcIklORFwiXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIklTTzYzOTFcIixcbiAgICAgIGxvY2FsZXM6IFtcInB0XCIsIFwiZW5cIiwgXCJ6aFwiLCBcImVzXCIsIFwiaGlcIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJJU082MzkyXCIsXG4gICAgICBsb2NhbGVzOiBbXCJwb3JcIiwgXCJlbmdcIiwgXCJ6aG9cIiwgXCJzcGFcIiwgXCJoaW5cIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJvZmZpY2lhbExhbmd1YWdlXCIsXG4gICAgICBsb2NhbGVzOiBbXCJQb3J0dWd1ZXNlXCIsIFwiRW5nbGlzaFwiLCBcIkNoaW5lc2VcIiwgXCJTcGFuaXNoXCIsIFwiSGluZGlcIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJuYXRpdmVPZmZpY2lhbExhbmd1YWdlXCIsXG4gICAgICBsb2NhbGVzOiBbXCJQb3J0dWd1w6pzXCIsIFwiRW5nbGlzaFwiLCBcIuS4reaWh1wiLCBcIkVzcGHDsW9sXCIsIFwi4KS54KS/4KSo4KWN4KSm4KWAXCJdLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgICBsb29rdXBLZXk6IFwicmVnaW9uXCIsXG4gICAgICBsb2NhbGVzOiBbXCJCcmF6aWxcIiwgXCJVbml0ZWQgS2luZ2RvbVwiLCBcIkNoaW5hXCIsIFwiTWV4aWNvXCIsIFwiSW5kaWFcIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJuYXRpdmVSZWdpb25cIixcbiAgICAgIGxvY2FsZXM6IFtcbiAgICAgICAgXCJCcmFzaWxcIixcbiAgICAgICAgXCJVbml0ZWQgS2luZ2RvbVwiLFxuICAgICAgICBcIuS4reWNjuS6uuawkeWFseWSjOWbvVwiLFxuICAgICAgICBcIk3DqXhpY29cIixcbiAgICAgICAgXCLgpK3gpL7gpLDgpKQg4KSX4KSj4KSw4KS+4KSc4KWN4KSvXCIsXG4gICAgICBdLFxuICAgIH0sXG4gIH0sXG5dO1xuY29uc3QgZGVmYXVsdE11bHRpcGxlQnlPZmZpY2lhbExhbmd1YWdlID0gW1wiUG9ydHVndWVzZVwiLCBcIkdlcm1hblwiXTtcbmNvbnN0IGRlZmF1bHRNdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnkgPSBbXCJlbi1VU1wiLCBcImVzLU1YXCJdO1xuY29uc3QgZGVmYXVsdFNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWdRdWVyeSA9IFwiaGktSU5cIjtcblxuY29uZmlndXJlKHtcbiAgbG9jYWxlc1N1YnNldDoge1xuICAgIGxvb2t1cEtleTogZGVmYXVsdExvb2t1cEtleSxcbiAgICBsb2NhbGVzOiBkZWZhdWx0TG9jYWxlcyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICBjb25zdCBbZGVtb0xvb2t1cEtleSwgc2V0RGVtb0xvb2t1cEtleV0gPSB1c2VTdGF0ZTxMb2NhbGVLZXk+KFxuICAgIFwiSUVURkxhbmd1YWdlVGFnXCJcbiAgKTtcbiAgY29uc3QgW2RlbW9Mb2NhbGVzLCBzZXREZW1vTG9jYWxlc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oZGVmYXVsdExvY2FsZXMpO1xuICBjb25zdCBbZnV0dXJlRGVtb0xvb2t1cEtleSwgc2V0RnV0dXJlRGVtb0xvb2t1cEtleV0gPSB1c2VTdGF0ZTxMb2NhbGVLZXk+KFxuICAgIGRlbW9Mb29rdXBLZXlcbiAgKTtcbiAgY29uc3QgW2Z1dHVyZURlbW9Mb2NhbGVzLCBzZXRGdXR1cmVEZW1vTG9jYWxlc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oXG4gICAgZGVtb0xvY2FsZXNcbiAgKTtcbiAgY29uc3QgW1xuICAgIGRlbW9Mb2NhbGVzUGxhY2Vob2xkZXIsXG4gICAgc2V0RGVtb0xvY2FsZXNQbGFjZWhvbGRlcixcbiAgXSA9IHVzZVN0YXRlPENvbmZpZ09wdGlvbnM+KGxvY2FsZXNDb25maWdQbGFjZWhvbGRlclswXSk7XG4gIGNvbnN0IFtcbiAgICBtdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnksXG4gICAgc2V0TXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5LFxuICBdID0gdXNlU3RhdGUoZGVmYXVsdE11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeSk7XG4gIGNvbnN0IFtcbiAgICBzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnksXG4gICAgc2V0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5LFxuICBdID0gdXNlU3RhdGUoZGVmYXVsdFNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWdRdWVyeSk7XG4gIGNvbnN0IFtcbiAgICBzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLFxuICAgIHNldFNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWcsXG4gIF0gPSB1c2VTdGF0ZTxMb2NhbGU+KCk7XG4gIGNvbnN0IFtcbiAgICBtdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnLFxuICAgIHNldE11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWcsXG4gIF0gPSB1c2VTdGF0ZTxMb2NhbGVbXT4oW10pO1xuICBjb25zdCBbbG9jYWxlc0J5R2V0TG9jYWxlcywgc2V0TG9jYWxlc0J5R2V0TG9jYWxlc10gPSB1c2VTdGF0ZTxMb2NhbGVbXT4oW10pO1xuXG4gIGNvbnN0IG9wdGlvbnM6IHsgdmFsdWU6IExvY2FsZUtleTsgbGFiZWw6IHN0cmluZyB9W10gPSBbXG4gICAgeyB2YWx1ZTogXCJJRVRGTGFuZ3VhZ2VUYWdcIiwgbGFiZWw6IFwiSUVURiBsYW5ndWFnZSB0YWdcIiB9LFxuICAgIHsgdmFsdWU6IFwiSVNPMzE2NjFBbHBoYTJcIiwgbGFiZWw6IFwiSVNPIDMxNjYtMSBhbHBoYS0yXCIgfSxcbiAgICB7IHZhbHVlOiBcIklTTzMxNjYxQWxwaGEzXCIsIGxhYmVsOiBcIklTTyAzMTY2LTEgYWxwaGEtM1wiIH0sXG4gICAgeyB2YWx1ZTogXCJJU082MzkxXCIsIGxhYmVsOiBcIklTTyA2MzktMVwiIH0sXG4gICAgeyB2YWx1ZTogXCJJU082MzkyXCIsIGxhYmVsOiBcIklTTyA2MzktMlwiIH0sXG4gICAgeyB2YWx1ZTogXCJuYXRpdmVPZmZpY2lhbExhbmd1YWdlXCIsIGxhYmVsOiBcIk5hdGl2ZSBvZmZpY2lhbCBsYW5ndWFnZVwiIH0sXG4gICAgeyB2YWx1ZTogXCJuYXRpdmVSZWdpb25cIiwgbGFiZWw6IFwiTmF0aXZlIHJlZ2lvblwiIH0sXG4gICAgeyB2YWx1ZTogXCJvZmZpY2lhbExhbmd1YWdlXCIsIGxhYmVsOiBcIk9mZmljaWFsIGxhbmd1YWdlXCIgfSxcbiAgICB7IHZhbHVlOiBcInJlZ2lvblwiLCBsYWJlbDogXCJSZWdpb25cIiB9LFxuICBdO1xuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdE9uQ2hhbmdlID0gKHZhbHVlOiBMb2NhbGVLZXkpID0+IHtcbiAgICBzZXRGdXR1cmVEZW1vTG9va3VwS2V5KHZhbHVlKTtcblxuICAgIGNvbnN0IGNvbmZpZyA9IGxvY2FsZXNDb25maWdQbGFjZWhvbGRlci5maW5kKFxuICAgICAgKGNvbmYpID0+IGNvbmYubG9jYWxlc1N1YnNldC5sb29rdXBLZXkgPT09IHZhbHVlXG4gICAgKTtcblxuICAgIHNldEZ1dHVyZURlbW9Mb2NhbGVzKGNvbmZpZy5sb2NhbGVzU3Vic2V0LmxvY2FsZXMpO1xuICAgIHNldERlbW9Mb2NhbGVzUGxhY2Vob2xkZXIoY29uZmlnKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHRpdGxlPmkxOG4taXNvLWxhbmd1YWdlczwvdGl0bGU+XG4gICAgICAgIDxsaW5rIHJlbD1cImljb25cIiBocmVmPVwiL2Zhdmljb24uaWNvXCIgLz5cbiAgICAgIDwvSGVhZD5cblxuICAgICAgPG1haW4+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0aXRsZVwiPmkxOG4taXNvLWxhbmd1YWdlczwvaDE+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImRlc2NyaXB0aW9uXCI+R2V0IHN0YXJ0ZWQgYnkgYWRkaW5nIGl0IHRvIHlvdXIgcHJvamVjdCA8L3A+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29kZUJsb2NrQ29udGFpbmVyXCI+XG4gICAgICAgICAgPENvZGVCbG9jaz5cbiAgICAgICAgICAgIHlhcm4gYWRkIEBtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlcyA8YnIgLz5cbiAgICAgICAgICAgIG5wbSBpIEBtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlXG4gICAgICAgICAgPC9Db2RlQmxvY2s+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIj5cbiAgICAgICAgICAgIDxoMz5jb25maWd1cmU8L2gzPlxuICAgICAgICAgICAgPGg0Pmxvb2t1cCBrZXk8L2g0PlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e29wdGlvbnNbMF19XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsob3B0aW9uOiB7IHZhbHVlOiBMb2NhbGVLZXk7IGxhYmVsOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGhhbmRsZVNlbGVjdE9uQ2hhbmdlKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGg0PmxvY2FsZXM8L2g0PlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtkZW1vTG9jYWxlc1BsYWNlaG9sZGVyLmxvY2FsZXNTdWJzZXQubG9jYWxlcy5qb2luKFxuICAgICAgICAgICAgICAgIFwiLFwiXG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHZhbHVlPXtmdXR1cmVEZW1vTG9jYWxlcy5qb2luKCl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+XG4gICAgICAgICAgICAgICAgc2V0RnV0dXJlRGVtb0xvY2FsZXMoZXZlbnQudGFyZ2V0LnZhbHVlLnNwbGl0KFwiLFwiKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgIDxDb2RlQmxvY2s+XG4gICAgICAgICAgICAgIHtgXG5pbXBvcnQgeyBjb25maWd1cmUgfSBmcm9tICdAbWFyY2Vsb3ZpY2VudGVnYy9pMThuLWlzby1sYW5ndWFnZXMnXG4gICAgICAgICAgICAgIFxuY29uZmlndXJlKHtcbiAgbG9jYWxlc1N1YnNldDoge1xuICAgIGxvb2t1cEtleTogJyR7ZGVtb0xvb2t1cEtleX0nLFxuICAgIGxvY2FsZXM6IFske2RlbW9Mb2NhbGVzLm1hcCgobG9jYWxlKSA9PiBgJyR7bG9jYWxlfSdgKX1dLFxuICB9LFxufSlcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgIDwvQ29kZUJsb2NrPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJlKHtcbiAgICAgICAgICAgICAgICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwS2V5OiBmdXR1cmVEZW1vTG9va3VwS2V5LFxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzOiBmdXR1cmVEZW1vTG9jYWxlcyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2V0RGVtb0xvb2t1cEtleShmdXR1cmVEZW1vTG9va3VwS2V5KTtcbiAgICAgICAgICAgICAgICBzZXREZW1vTG9jYWxlcyhmdXR1cmVEZW1vTG9jYWxlcyk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJ1biB0aGUgY29kZSBhYm92ZSDimJ3vuI9cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCI+XG4gICAgICAgICAgICA8aDM+Z2V0TG9jYWxlczwvaDM+XG4gICAgICAgICAgICA8Q29kZUJsb2NrPlxuICAgICAgICAgICAgICB7YFxuaW1wb3J0IHsgZ2V0TG9jYWxlcyB9IGZyb20gJ0BtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlcydcbiAgICAgICAgICAgICAgXG5jb25zdCBsb2NhbGVzID0gZ2V0TG9jYWxlcygpXG5cbmxvY2FsZXMubWFwKChsb2NhbGUpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICA8cD5PZmZpY2lhbCBsYW5ndWFnZToge2xvY2FsZS5vZmZpY2lhbExhbmd1YWdlfTwvcD5cbiAgICA8cD5cbiAgICAgIE5hdGl2ZSBvZmZpY2lhbCBsYW5ndWFnZToge2xvY2FsZS5uYXRpdmVPZmZpY2lhbExhbmd1YWdlfVxuICAgIDwvcD5cbiAgICA8cD5SZWdpb246IHtsb2NhbGUucmVnaW9ufTwvcD5cbiAgICA8cD5OYXRpdmUgcmVnaW9uOiB7bG9jYWxlLm5hdGl2ZVJlZ2lvbn08L3A+XG4gICAgPHA+SVNPIDYzOS0xOiB7bG9jYWxlLklTTzYzOTF9PC9wPlxuICAgIDxwPklTTyAzMTY2LTEgYWxwaGEtMjoge2xvY2FsZS5JU08zMTY2MUFscGhhMn08L3A+XG4gICAgPHA+SVNPIDMxNjYtMSBhbHBoYS0zOiB7bG9jYWxlLklTTzMxNjYxQWxwaGEzfTwvcD5cbiAgICA8cD5JRVRGTCBsYW5ndWFnZSB0YWc6IHtsb2NhbGUuSUVURkxhbmd1YWdlVGFnfTwvcD5cbiAgICA8Lz5cbiAgKTtcbn0pXG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA8L0NvZGVCbG9jaz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZXMgPSBnZXRMb2NhbGVzKCk7XG4gICAgICAgICAgICAgICAgc2V0TG9jYWxlc0J5R2V0TG9jYWxlcyhsb2NhbGVzKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUnVuIHRoZSBjb2RlIGFib3ZlIOKYne+4j1xuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICB7bG9jYWxlc0J5R2V0TG9jYWxlcy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICAgICAgPGRldGFpbHM+XG4gICAgICAgICAgICAgICAgICA8c3VtbWFyeT5SZXN1bHQ8L3N1bW1hcnk+XG4gICAgICAgICAgICAgICAgICB7bG9jYWxlc0J5R2V0TG9jYWxlcy5tYXAoKGxvY2FsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICA8RnJhZ21lbnQga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5PZmZpY2lhbCBsYW5ndWFnZToge2xvY2FsZS5vZmZpY2lhbExhbmd1YWdlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICBOYXRpdmUgb2ZmaWNpYWwgbGFuZ3VhZ2U6e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9jYWxlLm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5SZWdpb246IHtsb2NhbGUucmVnaW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5hdGl2ZSByZWdpb246IHtsb2NhbGUubmF0aXZlUmVnaW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPklTTyA2MzktMToge2xvY2FsZS5JU082MzkxfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPklTTyAzMTY2LTEgYWxwaGEtMjoge2xvY2FsZS5JU08zMTY2MUFscGhhMn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5JU08gMzE2Ni0xIGFscGhhLTM6IHtsb2NhbGUuSVNPMzE2NjFBbHBoYTN9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+SUVURkwgbGFuZ3VhZ2UgdGFnOiB7bG9jYWxlLklFVEZMYW5ndWFnZVRhZ308L3A+XG4gICAgICAgICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGV0YWlscz5cbiAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGgzPmdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnPC9oMz5cbiAgICAgICAgICAgIDxoND5cbiAgICAgICAgICAgICAgWW91IGNhbiBnZXQgYSBzaW5nbGUgbG9jYWxlIGJ5IGxhbmd1YWdlIHRhZyBieSBwcm92aWRpbmcgYSBzaW5nbGVcbiAgICAgICAgICAgICAgbGFuZ3VhZ2UgdGFnLi4uXG4gICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtkZWZhdWx0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5fVxuICAgICAgICAgICAgICB2YWx1ZT17c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5fVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHNldFNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWdRdWVyeShldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICA8Q29kZUJsb2NrPlxuICAgICAgICAgICAgICB7YFxuaW1wb3J0IHsgZ2V0TG9jYWxlQnlJRVRGTGFuZ3VhZ2VUYWcsIExvY2FsZSB9IGZyb20gJ0BtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlcydcbiAgICAgICAgICAgICAgXG5jb25zdCBsb2NhbGUgPSBnZXRMb2NhbGVCeUlFVEZMYW5ndWFnZVRhZygnJHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnl9JykgYXMgTG9jYWxlXG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA8L0NvZGVCbG9jaz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZSA9IGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnKFxuICAgICAgICAgICAgICAgICAgc2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5XG4gICAgICAgICAgICAgICAgKSBhcyBMb2NhbGU7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhbGUpO1xuXG4gICAgICAgICAgICAgICAgc2V0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZyhsb2NhbGUpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSdW4gdGhlIGNvZGUgYWJvdmUg4pid77iPXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnICYmIChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICAgICAgPGRldGFpbHM+XG4gICAgICAgICAgICAgICAgICA8c3VtbWFyeT5SZXN1bHQ8L3N1bW1hcnk+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgT2ZmaWNpYWwgbGFuZ3VhZ2U6e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5vZmZpY2lhbExhbmd1YWdlfVxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIE5hdGl2ZSBvZmZpY2lhbCBsYW5ndWFnZTp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2V9XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8cD5SZWdpb246IHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLnJlZ2lvbn08L3A+XG4gICAgICAgICAgICAgICAgICA8cD5OYXRpdmUgcmVnaW9uOiB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5uYXRpdmVSZWdpb259PC9wPlxuICAgICAgICAgICAgICAgICAgPHA+SVNPIDYzOS0xOiB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5JU082MzkxfTwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBJU08gMzE2Ni0xIGFscGhhLTI6e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5JU08zMTY2MUFscGhhMn1cbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBJU08gMzE2Ni0xIGFscGhhLTM6e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5JU08zMTY2MUFscGhhM31cbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBJRVRGTCBsYW5ndWFnZSB0YWc6e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICB7c2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZy5JRVRGTGFuZ3VhZ2VUYWd9XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIDxoND5cbiAgICAgICAgICAgICAgT3IgeW91IGNhbiBnZXQgbXVsdGlwbGUgYnkgcHJvdmlkaW5nIG11bHRpcGxlIGxhbmd1YWdlIHRhZ3MhXG4gICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtkZWZhdWx0TXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5LmpvaW4oXCIsXCIpfVxuICAgICAgICAgICAgICB2YWx1ZT17bXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5LmpvaW4oKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT5cbiAgICAgICAgICAgICAgICBzZXRNdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnkoXG4gICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUuc3BsaXQoXCIsXCIpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmF0b3JcIiAvPlxuICAgICAgICAgICAgPENvZGVCbG9jaz5cbiAgICAgICAgICAgICAge2BcbmltcG9ydCB7IGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnLCBMb2NhbGUgfSBmcm9tICdAbWFyY2Vsb3ZpY2VudGVnYy9pMThuLWlzby1sYW5ndWFnZXMnXG4gICAgICAgICAgICAgIFxuY29uc3QgbG9jYWxlcyA9IGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnKFske211bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeS5tYXAoXG4gICAgICAgICAgICAgICAgKGxvY2FsZSkgPT4gYCcke2xvY2FsZX0nYFxuICAgICAgICAgICAgICApfV0pIGFzIExvY2FsZVtdXG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA8L0NvZGVCbG9jaz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZXMgPSBnZXRMb2NhbGVCeUlFVEZMYW5ndWFnZVRhZyhcbiAgICAgICAgICAgICAgICAgIG11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeVxuICAgICAgICAgICAgICAgICkgYXMgTG9jYWxlW107XG5cbiAgICAgICAgICAgICAgICBzZXRNdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnKGxvY2FsZXMpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSdW4gdGhlIGNvZGUgYWJvdmUg4pid77iPXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgIDxkZXRhaWxzPlxuICAgICAgICAgICAgICA8c3VtbWFyeT5SZXN1bHQ8L3N1bW1hcnk+XG4gICAgICAgICAgICAgIHttdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnLm1hcCgobG9jYWxlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8RnJhZ21lbnQga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHA+T2ZmaWNpYWwgbGFuZ3VhZ2U6IHtsb2NhbGUub2ZmaWNpYWxMYW5ndWFnZX08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZSBvZmZpY2lhbCBsYW5ndWFnZToge2xvY2FsZS5uYXRpdmVPZmZpY2lhbExhbmd1YWdlfVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPlJlZ2lvbjoge2xvY2FsZS5yZWdpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5OYXRpdmUgcmVnaW9uOiB7bG9jYWxlLm5hdGl2ZVJlZ2lvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPklTTyA2MzktMToge2xvY2FsZS5JU082MzkxfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+SVNPIDMxNjYtMSBhbHBoYS0yOiB7bG9jYWxlLklTTzMxNjYxQWxwaGEyfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+SVNPIDMxNjYtMSBhbHBoYS0zOiB7bG9jYWxlLklTTzMxNjYxQWxwaGEzfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+SUVURkwgbGFuZ3VhZ2UgdGFnOiB7bG9jYWxlLklFVEZMYW5ndWFnZVRhZ308L3A+XG4gICAgICAgICAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvbWFpbj5cblxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGFcbiAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL21hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VzXCJcbiAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICA+XG4gICAgICAgICAgQnJvdWdodCB0byB5b3Ugd2l0aCDinaTvuI8gYnkgTWFyY2VsbyBDYXJkb3NvXG4gICAgICAgIDwvYT5cbiAgICAgIDwvZm9vdGVyPlxuXG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5jb250YWluZXIge1xuICAgICAgICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgIHBhZGRpbmc6IDAgMC41cmVtO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFpbiB7XG4gICAgICAgICAgcGFkZGluZzogNXJlbSAwO1xuICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmb290ZXIge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlYWVhZWE7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9vdGVyIGltZyB7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDAuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvb3RlciBhIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBhIHtcbiAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAudGl0bGUgYSB7XG4gICAgICAgICAgY29sb3I6ICMwMDcwZjM7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlIGE6aG92ZXIsXG4gICAgICAgIC50aXRsZSBhOmZvY3VzLFxuICAgICAgICAudGl0bGUgYTphY3RpdmUge1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gICAgICAgICAgZm9udC1zaXplOiA0cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpdGxlLFxuICAgICAgICAuZGVzY3JpcHRpb24ge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ncmlkIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcblxuICAgICAgICAgIG1heC13aWR0aDogMTI2MHB4O1xuICAgICAgICAgIG1hcmdpbi10b3A6IDNyZW07XG4gICAgICAgIH1cblxuICAgICAgICAuY29kZUJsb2NrQ29udGFpbmVyIHtcbiAgICAgICAgICBtYXgtd2lkdGg6IGNhbGMoMTAwdncgLSAyLjVyZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNhcmQge1xuICAgICAgICAgIG1hcmdpbjogMXJlbTtcbiAgICAgICAgICBmbGV4LWJhc2lzOiAzMCU7XG4gICAgICAgICAgbWF4LXdpZHRoOiA4MDBweDtcbiAgICAgICAgICBwYWRkaW5nOiAxLjVyZW07XG4gICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2VhZWFlYTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICAgICAgICAgIHRyYW5zaXRpb246IGNvbG9yIDAuMTVzIGVhc2UsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNhcmQgaW5wdXQge1xuICAgICAgICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICAgICAgICBoZWlnaHQ6IDM4cHg7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgIGJvcmRlcjogMC41cHggc29saWQgaHNsKDAsIDAlLCA4MCUpO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMTAwbXM7XG4gICAgICAgICAgY29sb3I6IGhzbCgwLCAwJSwgMjAlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIGlucHV0OmZvY3VzIHtcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMyNjg0ZmY7XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICMyNjg0ZmY7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCBidXR0b24ge1xuICAgICAgICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgICBib3JkZXI6IDAuNXB4IHNvbGlkIGhzbCgwLCAwJSwgODAlKTtcbiAgICAgICAgICBjb2xvcjogaHNsKDAsIDAlLCAyMCUpO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMTAwbXM7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCBidXR0b246Zm9jdXMsXG4gICAgICAgIC5jYXJkIGJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1ibHVlKTtcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggdmFyKC0tYmx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCBidXR0b246YWN0aXZlIHtcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJsdWUpO1xuICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB2YXIoLS1ibHVlKTtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ibHVlKTtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIGgzIHtcbiAgICAgICAgICBtYXJnaW46IDAgMCAxcmVtIDA7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjVyZW07XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCBwIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgZm9udC1zaXplOiAxLjI1cmVtO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCAuc2VwYXJhdG9yIHtcbiAgICAgICAgICBoZWlnaHQ6IDE0cHg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYWVhZWE7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5sb2dvIHtcbiAgICAgICAgICBoZWlnaHQ6IDFlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xuICAgICAgICAgIC5ncmlkIHtcbiAgICAgICAgICAgIHdpZHRoOiBjYWxjKDEwMHZ3IC0gMi41cmVtKTtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmNhcmQge1xuICAgICAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDEuNXJlbSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuZGVzY3JpcHRpb24ge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuXG4gICAgICA8c3R5bGUganN4IGdsb2JhbD57YFxuICAgICAgICBodG1sLFxuICAgICAgICBib2R5IHtcbiAgICAgICAgICAtLXNjcm9sbGJhckJHOiAjZmZmO1xuICAgICAgICAgIC0tdGh1bWJCRzogIzAwMDtcbiAgICAgICAgICAtLWJsdWU6ICMyNjg0ZmY7XG5cbiAgICAgICAgICBzY3JvbGxiYXItd2lkdGg6IHRoaW47XG4gICAgICAgICAgc2Nyb2xsYmFyLWNvbG9yOiB2YXIoLS10aHVtYkJHKSB2YXIoLS1zY3JvbGxiYXJCRyk7XG5cbiAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBTZWdvZSBVSSwgUm9ib3RvLFxuICAgICAgICAgICAgT3h5Z2VuLCBVYnVudHUsIENhbnRhcmVsbCwgRmlyYSBTYW5zLCBEcm9pZCBTYW5zLCBIZWx2ZXRpY2EgTmV1ZSxcbiAgICAgICAgICAgIHNhbnMtc2VyaWY7XG4gICAgICAgIH1cblxuICAgICAgICAqIHtcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICB9XG5cbiAgICAgICAgaHRtbDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRodW1iQkcpO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1zY3JvbGxiYXJCRyk7XG4gICAgICAgIH1cblxuICAgICAgICBodG1sOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tc2Nyb2xsYmFyQkcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaHRtbDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICAgIHdpZHRoOiAxMXB4O1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXX0= */\\n/*@ sourceURL=/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx */\"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"1712543154\",\n    __self: this\n  }, \"html,body{--scrollbarBG:#fff;--thumbBG:#000;--blue:#2684ff;-webkit-scrollbar-width:thin;-moz-scrollbar-width:thin;-ms-scrollbar-width:thin;scrollbar-width:thin;-webkit-scrollbar-color:var(--thumbBG) var(--scrollbarBG);-moz-scrollbar-color:var(--thumbBG) var(--scrollbarBG);-ms-scrollbar-color:var(--thumbBG) var(--scrollbarBG);scrollbar-color:var(--thumbBG) var(--scrollbarBG);padding:0;margin:0;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto, Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue, sans-serif;}*{box-sizing:border-box;}html::-webkit-scrollbar-thumb{background-color:var(--thumbBG);border-radius:6px;border:3px solid var(--scrollbarBG);}html::-webkit-scrollbar-track{background:var(--scrollbarBG);}html::-webkit-scrollbar{width:11px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL21hcmNlbG8vRG9jdW1lbnRzL2kxOG4tbGFuZ3VhZ2UtY29kZXMvZGVtby9wYWdlcy9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc2xCeUIsQUFJOEIsQUFlRyxBQUlVLEFBTUYsQUFJbkIsV0FDYixRQTdCaUIsR0FlakIsUUFVQSxFQU5vQixFQWxCSCxlQUVNLENBaUJlLG9DQUN0QyxnRUFqQm9ELHlOQUV4QyxVQUNELFNBR0csc0lBQ2QiLCJmaWxlIjoiL2hvbWUvbWFyY2Vsby9Eb2N1bWVudHMvaTE4bi1sYW5ndWFnZS1jb2Rlcy9kZW1vL3BhZ2VzL2luZGV4LnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIZWFkIGZyb20gXCJuZXh0L2hlYWRcIjtcbmltcG9ydCBTZWxlY3QgZnJvbSBcInJlYWN0LXNlbGVjdFwiO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb2RlQmxvY2sgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Db2RlQmxvY2tcIjtcbmltcG9ydCB7XG4gIGNvbmZpZ3VyZSBhcyBjb25mLFxuICBnZXRMb2NhbGVzLFxuICBMb2NhbGVLZXksXG4gIGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnLFxuICBMb2NhbGUsXG59IGZyb20gXCJAbWFyY2Vsb3ZpY2VudGVnYy9pMThuLWlzby1sYW5ndWFnZXNcIjtcblxuaW50ZXJmYWNlIENvbmZpZ09wdGlvbnMge1xuICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgbG9va3VwS2V5OiBMb2NhbGVLZXk7XG4gICAgbG9jYWxlczogc3RyaW5nW107XG4gIH07XG59XG5cbmNvbnN0IGNvbmZpZ3VyZSA9IChvcHRpb25zOiBDb25maWdPcHRpb25zKSA9PiB7XG4gIGNvbmYob3B0aW9ucyk7XG59O1xuXG5jb25zdCBkZWZhdWx0TG9va3VwS2V5OiBMb2NhbGVLZXkgPSBcIklFVEZMYW5ndWFnZVRhZ1wiO1xuY29uc3QgZGVmYXVsdExvY2FsZXMgPSBbXCJwdC1CUlwiLCBcImVuLVVTXCIsIFwiemgtQ05cIiwgXCJlcy1NWFwiLCBcImhpLUlOXCJdO1xuY29uc3QgbG9jYWxlc0NvbmZpZ1BsYWNlaG9sZGVyOiBBcnJheTxDb25maWdPcHRpb25zPiA9IFtcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogZGVmYXVsdExvb2t1cEtleSxcbiAgICAgIGxvY2FsZXM6IGRlZmF1bHRMb2NhbGVzLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgICBsb29rdXBLZXk6IFwiSVNPMzE2NjFBbHBoYTJcIixcbiAgICAgIGxvY2FsZXM6IFtcIlBUXCIsIFwiVVNcIiwgXCJDSFwiLCBcIk1YXCIsIFwiSU5cIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJJU08zMTY2MUFscGhhM1wiLFxuICAgICAgbG9jYWxlczogW1wiQlJBXCIsIFwiVVNBXCIsIFwiQ0hOXCIsIFwiTUVYXCIsIFwiSU5EXCJdLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgICBsb29rdXBLZXk6IFwiSVNPNjM5MVwiLFxuICAgICAgbG9jYWxlczogW1wicHRcIiwgXCJlblwiLCBcInpoXCIsIFwiZXNcIiwgXCJoaVwiXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIklTTzYzOTJcIixcbiAgICAgIGxvY2FsZXM6IFtcInBvclwiLCBcImVuZ1wiLCBcInpob1wiLCBcInNwYVwiLCBcImhpblwiXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIm9mZmljaWFsTGFuZ3VhZ2VcIixcbiAgICAgIGxvY2FsZXM6IFtcIlBvcnR1Z3Vlc2VcIiwgXCJFbmdsaXNoXCIsIFwiQ2hpbmVzZVwiLCBcIlNwYW5pc2hcIiwgXCJIaW5kaVwiXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2VcIixcbiAgICAgIGxvY2FsZXM6IFtcIlBvcnR1Z3XDqnNcIiwgXCJFbmdsaXNoXCIsIFwi5Lit5paHXCIsIFwiRXNwYcOxb2xcIiwgXCLgpLngpL/gpKjgpY3gpKbgpYBcIl0sXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIGxvY2FsZXNTdWJzZXQ6IHtcbiAgICAgIGxvb2t1cEtleTogXCJyZWdpb25cIixcbiAgICAgIGxvY2FsZXM6IFtcIkJyYXppbFwiLCBcIlVuaXRlZCBLaW5nZG9tXCIsIFwiQ2hpbmFcIiwgXCJNZXhpY29cIiwgXCJJbmRpYVwiXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgbG9va3VwS2V5OiBcIm5hdGl2ZVJlZ2lvblwiLFxuICAgICAgbG9jYWxlczogW1xuICAgICAgICBcIkJyYXNpbFwiLFxuICAgICAgICBcIlVuaXRlZCBLaW5nZG9tXCIsXG4gICAgICAgIFwi5Lit5Y2O5Lq65rCR5YWx5ZKM5Zu9XCIsXG4gICAgICAgIFwiTcOpeGljb1wiLFxuICAgICAgICBcIuCkreCkvuCksOCkpCDgpJfgpKPgpLDgpL7gpJzgpY3gpK9cIixcbiAgICAgIF0sXG4gICAgfSxcbiAgfSxcbl07XG5jb25zdCBkZWZhdWx0TXVsdGlwbGVCeU9mZmljaWFsTGFuZ3VhZ2UgPSBbXCJQb3J0dWd1ZXNlXCIsIFwiR2VybWFuXCJdO1xuY29uc3QgZGVmYXVsdE11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeSA9IFtcImVuLVVTXCIsIFwiZXMtTVhcIl07XG5jb25zdCBkZWZhdWx0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5ID0gXCJoaS1JTlwiO1xuXG5jb25maWd1cmUoe1xuICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgbG9va3VwS2V5OiBkZWZhdWx0TG9va3VwS2V5LFxuICAgIGxvY2FsZXM6IGRlZmF1bHRMb2NhbGVzLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhvbWUoKSB7XG4gIGNvbnN0IFtkZW1vTG9va3VwS2V5LCBzZXREZW1vTG9va3VwS2V5XSA9IHVzZVN0YXRlPExvY2FsZUtleT4oXG4gICAgXCJJRVRGTGFuZ3VhZ2VUYWdcIlxuICApO1xuICBjb25zdCBbZGVtb0xvY2FsZXMsIHNldERlbW9Mb2NhbGVzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihkZWZhdWx0TG9jYWxlcyk7XG4gIGNvbnN0IFtmdXR1cmVEZW1vTG9va3VwS2V5LCBzZXRGdXR1cmVEZW1vTG9va3VwS2V5XSA9IHVzZVN0YXRlPExvY2FsZUtleT4oXG4gICAgZGVtb0xvb2t1cEtleVxuICApO1xuICBjb25zdCBbZnV0dXJlRGVtb0xvY2FsZXMsIHNldEZ1dHVyZURlbW9Mb2NhbGVzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihcbiAgICBkZW1vTG9jYWxlc1xuICApO1xuICBjb25zdCBbXG4gICAgZGVtb0xvY2FsZXNQbGFjZWhvbGRlcixcbiAgICBzZXREZW1vTG9jYWxlc1BsYWNlaG9sZGVyLFxuICBdID0gdXNlU3RhdGU8Q29uZmlnT3B0aW9ucz4obG9jYWxlc0NvbmZpZ1BsYWNlaG9sZGVyWzBdKTtcbiAgY29uc3QgW1xuICAgIG11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeSxcbiAgICBzZXRNdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnksXG4gIF0gPSB1c2VTdGF0ZShkZWZhdWx0TXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5KTtcbiAgY29uc3QgW1xuICAgIHNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWdRdWVyeSxcbiAgICBzZXRTaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnksXG4gIF0gPSB1c2VTdGF0ZShkZWZhdWx0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5KTtcbiAgY29uc3QgW1xuICAgIHNpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWcsXG4gICAgc2V0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZyxcbiAgXSA9IHVzZVN0YXRlPExvY2FsZT4oKTtcbiAgY29uc3QgW1xuICAgIG11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWcsXG4gICAgc2V0TXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZyxcbiAgXSA9IHVzZVN0YXRlPExvY2FsZVtdPihbXSk7XG4gIGNvbnN0IFtsb2NhbGVzQnlHZXRMb2NhbGVzLCBzZXRMb2NhbGVzQnlHZXRMb2NhbGVzXSA9IHVzZVN0YXRlPExvY2FsZVtdPihbXSk7XG5cbiAgY29uc3Qgb3B0aW9uczogeyB2YWx1ZTogTG9jYWxlS2V5OyBsYWJlbDogc3RyaW5nIH1bXSA9IFtcbiAgICB7IHZhbHVlOiBcIklFVEZMYW5ndWFnZVRhZ1wiLCBsYWJlbDogXCJJRVRGIGxhbmd1YWdlIHRhZ1wiIH0sXG4gICAgeyB2YWx1ZTogXCJJU08zMTY2MUFscGhhMlwiLCBsYWJlbDogXCJJU08gMzE2Ni0xIGFscGhhLTJcIiB9LFxuICAgIHsgdmFsdWU6IFwiSVNPMzE2NjFBbHBoYTNcIiwgbGFiZWw6IFwiSVNPIDMxNjYtMSBhbHBoYS0zXCIgfSxcbiAgICB7IHZhbHVlOiBcIklTTzYzOTFcIiwgbGFiZWw6IFwiSVNPIDYzOS0xXCIgfSxcbiAgICB7IHZhbHVlOiBcIklTTzYzOTJcIiwgbGFiZWw6IFwiSVNPIDYzOS0yXCIgfSxcbiAgICB7IHZhbHVlOiBcIm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2VcIiwgbGFiZWw6IFwiTmF0aXZlIG9mZmljaWFsIGxhbmd1YWdlXCIgfSxcbiAgICB7IHZhbHVlOiBcIm5hdGl2ZVJlZ2lvblwiLCBsYWJlbDogXCJOYXRpdmUgcmVnaW9uXCIgfSxcbiAgICB7IHZhbHVlOiBcIm9mZmljaWFsTGFuZ3VhZ2VcIiwgbGFiZWw6IFwiT2ZmaWNpYWwgbGFuZ3VhZ2VcIiB9LFxuICAgIHsgdmFsdWU6IFwicmVnaW9uXCIsIGxhYmVsOiBcIlJlZ2lvblwiIH0sXG4gIF07XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0T25DaGFuZ2UgPSAodmFsdWU6IExvY2FsZUtleSkgPT4ge1xuICAgIHNldEZ1dHVyZURlbW9Mb29rdXBLZXkodmFsdWUpO1xuXG4gICAgY29uc3QgY29uZmlnID0gbG9jYWxlc0NvbmZpZ1BsYWNlaG9sZGVyLmZpbmQoXG4gICAgICAoY29uZikgPT4gY29uZi5sb2NhbGVzU3Vic2V0Lmxvb2t1cEtleSA9PT0gdmFsdWVcbiAgICApO1xuXG4gICAgc2V0RnV0dXJlRGVtb0xvY2FsZXMoY29uZmlnLmxvY2FsZXNTdWJzZXQubG9jYWxlcyk7XG4gICAgc2V0RGVtb0xvY2FsZXNQbGFjZWhvbGRlcihjb25maWcpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8dGl0bGU+aTE4bi1pc28tbGFuZ3VhZ2VzPC90aXRsZT5cbiAgICAgICAgPGxpbmsgcmVsPVwiaWNvblwiIGhyZWY9XCIvZmF2aWNvbi5pY29cIiAvPlxuICAgICAgPC9IZWFkPlxuXG4gICAgICA8bWFpbj5cbiAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRpdGxlXCI+aTE4bi1pc28tbGFuZ3VhZ2VzPC9oMT5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwiZGVzY3JpcHRpb25cIj5HZXQgc3RhcnRlZCBieSBhZGRpbmcgaXQgdG8geW91ciBwcm9qZWN0IDwvcD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2RlQmxvY2tDb250YWluZXJcIj5cbiAgICAgICAgICA8Q29kZUJsb2NrPlxuICAgICAgICAgICAgeWFybiBhZGQgQG1hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VzIDxiciAvPlxuICAgICAgICAgICAgbnBtIGkgQG1hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VcbiAgICAgICAgICA8L0NvZGVCbG9jaz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGgzPmNvbmZpZ3VyZTwvaDM+XG4gICAgICAgICAgICA8aDQ+bG9va3VwIGtleTwvaDQ+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17b3B0aW9uc1swXX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhvcHRpb246IHsgdmFsdWU6IExvY2FsZUtleTsgbGFiZWw6IHN0cmluZyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlU2VsZWN0T25DaGFuZ2Uob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8aDQ+bG9jYWxlczwvaDQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2RlbW9Mb2NhbGVzUGxhY2Vob2xkZXIubG9jYWxlc1N1YnNldC5sb2NhbGVzLmpvaW4oXG4gICAgICAgICAgICAgICAgXCIsXCJcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgdmFsdWU9e2Z1dHVyZURlbW9Mb2NhbGVzLmpvaW4oKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT5cbiAgICAgICAgICAgICAgICBzZXRGdXR1cmVEZW1vTG9jYWxlcyhldmVudC50YXJnZXQudmFsdWUuc3BsaXQoXCIsXCIpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmF0b3JcIiAvPlxuICAgICAgICAgICAgPENvZGVCbG9jaz5cbiAgICAgICAgICAgICAge2BcbmltcG9ydCB7IGNvbmZpZ3VyZSB9IGZyb20gJ0BtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlcydcbiAgICAgICAgICAgICAgXG5jb25maWd1cmUoe1xuICBsb2NhbGVzU3Vic2V0OiB7XG4gICAgbG9va3VwS2V5OiAnJHtkZW1vTG9va3VwS2V5fScsXG4gICAgbG9jYWxlczogWyR7ZGVtb0xvY2FsZXMubWFwKChsb2NhbGUpID0+IGAnJHtsb2NhbGV9J2ApfV0sXG4gIH0sXG59KVxuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPC9Db2RlQmxvY2s+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmUoe1xuICAgICAgICAgICAgICAgICAgbG9jYWxlc1N1YnNldDoge1xuICAgICAgICAgICAgICAgICAgICBsb29rdXBLZXk6IGZ1dHVyZURlbW9Mb29rdXBLZXksXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZXM6IGZ1dHVyZURlbW9Mb2NhbGVzLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZXREZW1vTG9va3VwS2V5KGZ1dHVyZURlbW9Mb29rdXBLZXkpO1xuICAgICAgICAgICAgICAgIHNldERlbW9Mb2NhbGVzKGZ1dHVyZURlbW9Mb2NhbGVzKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUnVuIHRoZSBjb2RlIGFib3ZlIOKYne+4j1xuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIj5cbiAgICAgICAgICAgIDxoMz5nZXRMb2NhbGVzPC9oMz5cbiAgICAgICAgICAgIDxDb2RlQmxvY2s+XG4gICAgICAgICAgICAgIHtgXG5pbXBvcnQgeyBnZXRMb2NhbGVzIH0gZnJvbSAnQG1hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VzJ1xuICAgICAgICAgICAgICBcbmNvbnN0IGxvY2FsZXMgPSBnZXRMb2NhbGVzKClcblxubG9jYWxlcy5tYXAoKGxvY2FsZSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmF0b3JcIiAvPlxuICAgIDxwPk9mZmljaWFsIGxhbmd1YWdlOiB7bG9jYWxlLm9mZmljaWFsTGFuZ3VhZ2V9PC9wPlxuICAgIDxwPlxuICAgICAgTmF0aXZlIG9mZmljaWFsIGxhbmd1YWdlOiB7bG9jYWxlLm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2V9XG4gICAgPC9wPlxuICAgIDxwPlJlZ2lvbjoge2xvY2FsZS5yZWdpb259PC9wPlxuICAgIDxwPk5hdGl2ZSByZWdpb246IHtsb2NhbGUubmF0aXZlUmVnaW9ufTwvcD5cbiAgICA8cD5JU08gNjM5LTE6IHtsb2NhbGUuSVNPNjM5MX08L3A+XG4gICAgPHA+SVNPIDMxNjYtMSBhbHBoYS0yOiB7bG9jYWxlLklTTzMxNjYxQWxwaGEyfTwvcD5cbiAgICA8cD5JU08gMzE2Ni0xIGFscGhhLTM6IHtsb2NhbGUuSVNPMzE2NjFBbHBoYTN9PC9wPlxuICAgIDxwPklFVEZMIGxhbmd1YWdlIHRhZzoge2xvY2FsZS5JRVRGTGFuZ3VhZ2VUYWd9PC9wPlxuICAgIDwvPlxuICApO1xufSlcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgIDwvQ29kZUJsb2NrPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlcyA9IGdldExvY2FsZXMoKTtcbiAgICAgICAgICAgICAgICBzZXRMb2NhbGVzQnlHZXRMb2NhbGVzKGxvY2FsZXMpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBSdW4gdGhlIGNvZGUgYWJvdmUg4pid77iPXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHtsb2NhbGVzQnlHZXRMb2NhbGVzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAgICA8ZGV0YWlscz5cbiAgICAgICAgICAgICAgICAgIDxzdW1tYXJ5PlJlc3VsdDwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICAgIHtsb2NhbGVzQnlHZXRMb2NhbGVzLm1hcCgobG9jYWxlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk9mZmljaWFsIGxhbmd1YWdlOiB7bG9jYWxlLm9mZmljaWFsTGFuZ3VhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZSBvZmZpY2lhbCBsYW5ndWFnZTp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGUubmF0aXZlT2ZmaWNpYWxMYW5ndWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlJlZ2lvbjoge2xvY2FsZS5yZWdpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+TmF0aXZlIHJlZ2lvbjoge2xvY2FsZS5uYXRpdmVSZWdpb259PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+SVNPIDYzOS0xOiB7bG9jYWxlLklTTzYzOTF9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+SVNPIDMxNjYtMSBhbHBoYS0yOiB7bG9jYWxlLklTTzMxNjYxQWxwaGEyfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPklTTyAzMTY2LTEgYWxwaGEtMzoge2xvY2FsZS5JU08zMTY2MUFscGhhM308L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5JRVRGTCBsYW5ndWFnZSB0YWc6IHtsb2NhbGUuSUVURkxhbmd1YWdlVGFnfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICA8L0ZyYWdtZW50PlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCI+XG4gICAgICAgICAgICA8aDM+Z2V0TG9jYWxlQnlJRVRGTGFuZ3VhZ2VUYWc8L2gzPlxuICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICBZb3UgY2FuIGdldCBhIHNpbmdsZSBsb2NhbGUgYnkgbGFuZ3VhZ2UgdGFnIGJ5IHByb3ZpZGluZyBhIHNpbmdsZVxuICAgICAgICAgICAgICBsYW5ndWFnZSB0YWcuLi5cbiAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2RlZmF1bHRTaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnl9XG4gICAgICAgICAgICAgIHZhbHVlPXtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+XG4gICAgICAgICAgICAgICAgc2V0U2luZ2xlTG9jYWxlQnlMYW5ndWFnZVRhZ1F1ZXJ5KGV2ZW50LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgIDxDb2RlQmxvY2s+XG4gICAgICAgICAgICAgIHtgXG5pbXBvcnQgeyBnZXRMb2NhbGVCeUlFVEZMYW5ndWFnZVRhZywgTG9jYWxlIH0gZnJvbSAnQG1hcmNlbG92aWNlbnRlZ2MvaTE4bi1pc28tbGFuZ3VhZ2VzJ1xuICAgICAgICAgICAgICBcbmNvbnN0IGxvY2FsZSA9IGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnKCcke3NpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWdRdWVyeX0nKSBhcyBMb2NhbGVcbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgIDwvQ29kZUJsb2NrPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlID0gZ2V0TG9jYWxlQnlJRVRGTGFuZ3VhZ2VUYWcoXG4gICAgICAgICAgICAgICAgICBzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnUXVlcnlcbiAgICAgICAgICAgICAgICApIGFzIExvY2FsZTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvY2FsZSk7XG5cbiAgICAgICAgICAgICAgICBzZXRTaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnKGxvY2FsZSk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJ1biB0aGUgY29kZSBhYm92ZSDimJ3vuI9cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAge3NpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWcgJiYgKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAgICA8ZGV0YWlscz5cbiAgICAgICAgICAgICAgICAgIDxzdW1tYXJ5PlJlc3VsdDwvc3VtbWFyeT5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBPZmZpY2lhbCBsYW5ndWFnZTp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLm9mZmljaWFsTGFuZ3VhZ2V9XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgTmF0aXZlIG9mZmljaWFsIGxhbmd1YWdlOntcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAge3NpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWcubmF0aXZlT2ZmaWNpYWxMYW5ndWFnZX1cbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPlJlZ2lvbjoge3NpbmdsZUxvY2FsZUJ5TGFuZ3VhZ2VUYWcucmVnaW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPk5hdGl2ZSByZWdpb246IHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLm5hdGl2ZVJlZ2lvbn08L3A+XG4gICAgICAgICAgICAgICAgICA8cD5JU08gNjM5LTE6IHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLklTTzYzOTF9PC9wPlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIElTTyAzMTY2LTEgYWxwaGEtMjp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLklTTzMxNjYxQWxwaGEyfVxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIElTTyAzMTY2LTEgYWxwaGEtMzp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLklTTzMxNjYxQWxwaGEzfVxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIElFVEZMIGxhbmd1YWdlIHRhZzp7XCIgXCJ9XG4gICAgICAgICAgICAgICAgICAgIHtzaW5nbGVMb2NhbGVCeUxhbmd1YWdlVGFnLklFVEZMYW5ndWFnZVRhZ31cbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8L2RldGFpbHM+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICBPciB5b3UgY2FuIGdldCBtdWx0aXBsZSBieSBwcm92aWRpbmcgbXVsdGlwbGUgbGFuZ3VhZ2UgdGFncyFcbiAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2RlZmF1bHRNdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnkuam9pbihcIixcIil9XG4gICAgICAgICAgICAgIHZhbHVlPXttdWx0aXBsZUxvY2FsZXNCeUxhbmd1YWdlVGFnUXVlcnkuam9pbigpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHNldE11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWdRdWVyeShcbiAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZS5zcGxpdChcIixcIilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlcGFyYXRvclwiIC8+XG4gICAgICAgICAgICA8Q29kZUJsb2NrPlxuICAgICAgICAgICAgICB7YFxuaW1wb3J0IHsgZ2V0TG9jYWxlQnlJRVRGTGFuZ3VhZ2VUYWcsIExvY2FsZSB9IGZyb20gJ0BtYXJjZWxvdmljZW50ZWdjL2kxOG4taXNvLWxhbmd1YWdlcydcbiAgICAgICAgICAgICAgXG5jb25zdCBsb2NhbGVzID0gZ2V0TG9jYWxlQnlJRVRGTGFuZ3VhZ2VUYWcoWyR7bXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5Lm1hcChcbiAgICAgICAgICAgICAgICAobG9jYWxlKSA9PiBgJyR7bG9jYWxlfSdgXG4gICAgICAgICAgICAgICl9XSkgYXMgTG9jYWxlW11cbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgIDwvQ29kZUJsb2NrPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlcyA9IGdldExvY2FsZUJ5SUVURkxhbmd1YWdlVGFnKFxuICAgICAgICAgICAgICAgICAgbXVsdGlwbGVMb2NhbGVzQnlMYW5ndWFnZVRhZ1F1ZXJ5XG4gICAgICAgICAgICAgICAgKSBhcyBMb2NhbGVbXTtcblxuICAgICAgICAgICAgICAgIHNldE11bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWcobG9jYWxlcyk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJ1biB0aGUgY29kZSBhYm92ZSDimJ3vuI9cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmF0b3JcIiAvPlxuICAgICAgICAgICAgPGRldGFpbHM+XG4gICAgICAgICAgICAgIDxzdW1tYXJ5PlJlc3VsdDwvc3VtbWFyeT5cbiAgICAgICAgICAgICAge211bHRpcGxlTG9jYWxlc0J5TGFuZ3VhZ2VUYWcubWFwKChsb2NhbGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgIDxGcmFnbWVudCBrZXk9e2luZGV4fT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZXBhcmF0b3JcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cD5PZmZpY2lhbCBsYW5ndWFnZToge2xvY2FsZS5vZmZpY2lhbExhbmd1YWdlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgTmF0aXZlIG9mZmljaWFsIGxhbmd1YWdlOiB7bG9jYWxlLm5hdGl2ZU9mZmljaWFsTGFuZ3VhZ2V9XG4gICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+UmVnaW9uOiB7bG9jYWxlLnJlZ2lvbn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwPk5hdGl2ZSByZWdpb246IHtsb2NhbGUubmF0aXZlUmVnaW9ufTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHA+SVNPIDYzOS0xOiB7bG9jYWxlLklTTzYzOTF9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5JU08gMzE2Ni0xIGFscGhhLTI6IHtsb2NhbGUuSVNPMzE2NjFBbHBoYTJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5JU08gMzE2Ni0xIGFscGhhLTM6IHtsb2NhbGUuSVNPMzE2NjFBbHBoYTN9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cD5JRVRGTCBsYW5ndWFnZSB0YWc6IHtsb2NhbGUuSUVURkxhbmd1YWdlVGFnfTwvcD5cbiAgICAgICAgICAgICAgICAgIDwvRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2RldGFpbHM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9tYWluPlxuXG4gICAgICA8Zm9vdGVyPlxuICAgICAgICA8YVxuICAgICAgICAgIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbWFyY2Vsb3ZpY2VudGVnYy9pMThuLWlzby1sYW5ndWFnZXNcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICBCcm91Z2h0IHRvIHlvdSB3aXRoIOKdpO+4jyBieSBNYXJjZWxvIENhcmRvc29cbiAgICAgICAgPC9hPlxuICAgICAgPC9mb290ZXI+XG5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgbWluLWhlaWdodDogMTAwdmg7XG4gICAgICAgICAgcGFkZGluZzogMCAwLjVyZW07XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBtYWluIHtcbiAgICAgICAgICBwYWRkaW5nOiA1cmVtIDA7XG4gICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvb3RlciB7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDBweDtcbiAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2VhZWFlYTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmb290ZXIgaW1nIHtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMC41cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9vdGVyIGEge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGEge1xuICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC50aXRsZSBhIHtcbiAgICAgICAgICBjb2xvcjogIzAwNzBmMztcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAudGl0bGUgYTpob3ZlcixcbiAgICAgICAgLnRpdGxlIGE6Zm9jdXMsXG4gICAgICAgIC50aXRsZSBhOmFjdGl2ZSB7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgICAgIH1cblxuICAgICAgICAudGl0bGUge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS4xNTtcbiAgICAgICAgICBmb250LXNpemU6IDRyZW07XG4gICAgICAgIH1cblxuICAgICAgICAudGl0bGUsXG4gICAgICAgIC5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLmRlc2NyaXB0aW9uIHtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLmdyaWQge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuXG4gICAgICAgICAgbWF4LXdpZHRoOiAxMjYwcHg7XG4gICAgICAgICAgbWFyZ2luLXRvcDogM3JlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jb2RlQmxvY2tDb250YWluZXIge1xuICAgICAgICAgIG1heC13aWR0aDogY2FsYygxMDB2dyAtIDIuNXJlbSk7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCB7XG4gICAgICAgICAgbWFyZ2luOiAxcmVtO1xuICAgICAgICAgIGZsZXgtYmFzaXM6IDMwJTtcbiAgICAgICAgICBtYXgtd2lkdGg6IDgwMHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDEuNXJlbTtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZWFlYWVhO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMC4xNXMgZWFzZSwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2U7XG4gICAgICAgIH1cblxuICAgICAgICAuY2FyZCBpbnB1dCB7XG4gICAgICAgICAgcGFkZGluZzogMC41cmVtO1xuICAgICAgICAgIGhlaWdodDogMzhweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgYm9yZGVyOiAwLjVweCBzb2xpZCBoc2woMCwgMCUsIDgwJSk7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAxMDBtcztcbiAgICAgICAgICBjb2xvcjogaHNsKDAsIDAlLCAyMCUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNhcmQgaW5wdXQ6Zm9jdXMge1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzI2ODRmZjtcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggIzI2ODRmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIGJ1dHRvbiB7XG4gICAgICAgICAgcGFkZGluZzogMC41cmVtO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICAgIGJvcmRlcjogMC41cHggc29saWQgaHNsKDAsIDAlLCA4MCUpO1xuICAgICAgICAgIGNvbG9yOiBoc2woMCwgMCUsIDIwJSk7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAxMDBtcztcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIGJ1dHRvbjpmb2N1cyxcbiAgICAgICAgLmNhcmQgYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJsdWUpO1xuICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB2YXIoLS1ibHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIGJ1dHRvbjphY3RpdmUge1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmx1ZSk7XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHZhcigtLWJsdWUpO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJsdWUpO1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNhcmQgaDMge1xuICAgICAgICAgIG1hcmdpbjogMCAwIDFyZW0gMDtcbiAgICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIHAge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBmb250LXNpemU6IDEuMjVyZW07XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jYXJkIC5zZXBhcmF0b3Ige1xuICAgICAgICAgIGhlaWdodDogMTRweDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VhZWFlYTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmxvZ28ge1xuICAgICAgICAgIGhlaWdodDogMWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgICAgICAgLmdyaWQge1xuICAgICAgICAgICAgd2lkdGg6IGNhbGMoMTAwdncgLSAyLjVyZW0pO1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuY2FyZCB7XG4gICAgICAgICAgICB3aWR0aDogY2FsYygxMDAlIC0gMS41cmVtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAudGl0bGUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAzcmVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5kZXNjcmlwdGlvbiB7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG5cbiAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAgICAgIGh0bWwsXG4gICAgICAgIGJvZHkge1xuICAgICAgICAgIC0tc2Nyb2xsYmFyQkc6ICNmZmY7XG4gICAgICAgICAgLS10aHVtYkJHOiAjMDAwO1xuICAgICAgICAgIC0tYmx1ZTogIzI2ODRmZjtcblxuICAgICAgICAgIHNjcm9sbGJhci13aWR0aDogdGhpbjtcbiAgICAgICAgICBzY3JvbGxiYXItY29sb3I6IHZhcigtLXRodW1iQkcpIHZhcigtLXNjcm9sbGJhckJHKTtcblxuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFNlZ29lIFVJLCBSb2JvdG8sXG4gICAgICAgICAgICBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLCBGaXJhIFNhbnMsIERyb2lkIFNhbnMsIEhlbHZldGljYSBOZXVlLFxuICAgICAgICAgICAgc2Fucy1zZXJpZjtcbiAgICAgICAgfVxuXG4gICAgICAgICoge1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIH1cblxuICAgICAgICBodG1sOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGh1bWJCRyk7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXNjcm9sbGJhckJHKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGh0bWw6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zY3JvbGxiYXJCRyk7XG4gICAgICAgIH1cblxuICAgICAgICBodG1sOjotd2Via2l0LXNjcm9sbGJhciB7XG4gICAgICAgICAgd2lkdGg6IDExcHg7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ== */\\n/*@ sourceURL=/home/marcelo/Documents/i18n-language-codes/demo/pages/index.tsx */\"));\n}\n\n_s(Home, \"4WIqe7Kx1n62m+OcXkfa9vKpAAw=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ })

})